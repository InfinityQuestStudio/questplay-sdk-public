!function (e) { e.QuestPlaySDK = new class { constructor() { this.apiKey = null, this.apiSecret = null, this.gameId = null, this.containerId = null, this.events = {}, this.iframe = null, this.version = "1.0.0" } init(e) { return new Promise(((t, r) => { try { this.validateOptions(e), this.storeOptions(e), this.logInfo("👍 SDK initialized"), this.embedGame().then((() => { this.triggerEvent("initializedEvent"), t() })).catch((e => { this.handleError("Error embedding game:", e, r) })) } catch (e) { this.handleError(e.message, e, r) } })) } validateOptions(e) { if (!e.apiKey || !e.apiSecret || !e.gameId) throw new Error("Required options are missing or not configured properly.") } storeOptions(e) { this.client_id = e.apiKey, this.client_secret = e.apiSecret, this.gameId = e.gameId, this.containerId = e.containerId } embedGame() { return new Promise((async (e, t) => { const r = await this.generateGameURL(); if (!r) return this.handleError("Game URL is not defined.", new Error, t); const n = this.createIframe(r), i = document.getElementById(this.containerId); if (!i) return this.handleError(`Element with id '${this.containerId}' not found.`, new Error, t); i.appendChild(n), n.onload = () => { this.logInfo("👍 Game iframe loaded successfully"), this.triggerEvent("iframeLoaded"), e() }, this.iframe = n })) } createIframe(e) { const t = document.createElement("iframe"); return t.src = e, t.style.width = "100%", t.style.height = "100%", t.setAttribute("frameborder", "0"), t.setAttribute("allow", "fullscreen"), t } async generateGameURL() { try { const e = await this.generateToken(); return `https://iqs-game-server-oh9l2.twofounder.com/games/${this.gameId}/${e}` } catch (e) { return this.logError("Error generating game URL. The game server might be down or inaccessible:", e), null } } async generateToken() { try { const e = await fetch(`https://iqs-token-generator.twofounder.com/generate-token?gameId=${this.gameId}`); return (await e.json()).token } catch (e) { return this.logError("Error generating token. The token server might be down or inaccessible:", e), null } } on(e, t) { this.events[e] || (this.events[e] = []), this.events[e].push(t) } triggerEvent(e, t = null) { this.events[e] && this.events[e].forEach((e => e(t))) } handleError(e, t, r) { this.logError(e, t), r && r(t) } logInfo(...e) { console.info("[QuestPlaySDK]", ...e) } logWarn(...e) { console.warn("[QuestPlaySDK]", ...e) } logError(...e) { console.error("[QuestPlaySDK]", ...e) } } }(window);
//# sourceMappingURL=questplay-sdk.min.js.map